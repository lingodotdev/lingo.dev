#!/usr/bin/env node

import type { Command } from "commander";
import { mkdir, writeFile } from "fs/promises";
import type { Code, Heading, Html, InlineCode, Root } from "mdast";
import path from "path";
import remarkStringify from "remark-stringify";
import { unified } from "unified";
import { fileURLToPath, pathToFileURL } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, "../..");

async function loadProgram(): Promise<Command> {
  const cliTsPath = path.resolve(projectRoot, "packages/cli/src/cli/index.ts");
  const { default: program } = (await import(
    pathToFileURL(cliTsPath).href
  )) as {
    default: Command;
  };
  return program;
}

function buildMarkdown(program: Command): string {
  // Build an mdast (Markdown AST) instead of concatenating strings
  const root: Root = {
    type: "root",
    children: [],
  };

  // Add document title
  const title: Heading = {
    type: "heading",
    depth: 1,
    children: [{ type: "text", value: "Lingo.dev CLI Reference" }],
  };
  root.children.push(title);

  // Add autogenerated notice (remark/markdown treats HTML blocks as-is)
  const notice: Html = {
    type: "html",
    value: "<!-- This file is auto-generated. Do not edit by hand. -->",
  };
  root.children.push(notice);

  const helper = program.createHelp();
  const visited = new Set<Command>();

  function walk(cmd: Command, parents: string[]): void {
    if (visited.has(cmd)) return;
    visited.add(cmd);

    const commandPath = [...parents, cmd.name()].join(" ").trim();

    // Heading for this command
    const heading: Heading = {
      type: "heading",
      depth: 2,
      children: [
        { type: "inlineCode", value: commandPath || cmd.name() } as InlineCode,
      ],
    };
    root.children.push(heading);

    // Code block containing the help output
    const codeBlock: Code = {
      type: "code",
      lang: undefined,
      value: helper.formatHelp(cmd, helper).trimEnd(),
    };
    root.children.push(codeBlock);

    cmd.commands
      .filter((c: any) => !(c as any)._hidden)
      .forEach((sub: Command) => walk(sub, [...parents, cmd.name()]));
  }

  walk(program, []);

  // Stringify the AST to Markdown using remark-stringify
  return unified().use(remarkStringify).stringify(root);
}

async function main(): Promise<void> {
  const program = await loadProgram();
  const markdown = buildMarkdown(program);

  const outDir = path.resolve(projectRoot, "docs/cli");
  await mkdir(outDir, { recursive: true });
  const outFile = path.join(outDir, "reference.md");
  await writeFile(outFile, markdown, "utf8");

  console.log(
    `âœ… CLI reference generated at ${path.relative(projectRoot, outFile)}`,
  );
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
