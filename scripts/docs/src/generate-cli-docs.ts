#!/usr/bin/env node

import type { Command } from "commander";
import { existsSync } from "fs";
import { mkdir, writeFile } from "fs/promises";
import type { Code, Heading, Html, InlineCode, Root } from "mdast";
import path from "path";
import remarkStringify from "remark-stringify";
import { unified } from "unified";
import { fileURLToPath, pathToFileURL } from "url";
import { getRepoRoot } from "./utils.js";

const REPO_ROOT = getRepoRoot();
const DOCS_DIR = path.resolve(REPO_ROOT, "docs");
const OUTPUT_FILE_NAME = "cli-commands.md";
const OUTPUT_FILE_PATH = path.resolve(DOCS_DIR, OUTPUT_FILE_NAME);

const __filename = fileURLToPath(import.meta.url);
const RELATIVE_SCRIPT_PATH = path.relative(REPO_ROOT, __filename);

const PAGE_TITLE = "Lingo.dev CLI Commands";
const AUTO_GENERATED_COMMENT = `<!-- This file is auto-generated by ${RELATIVE_SCRIPT_PATH}. Do not edit it by hand. -->`;

async function loadProgram(): Promise<Command> {
  const filePath = path.resolve(
    REPO_ROOT,
    "packages",
    "cli",
    "src",
    "cli",
    "index.ts",
  );

  if (!existsSync(filePath)) {
    throw new Error(`CLI source file not found at ${filePath}`);
  }

  const { default: program } = (await import(pathToFileURL(filePath).href)) as {
    default: Command;
  };
  return program;
}

function buildMarkdown(program: Command): string {
  // Create a Markdown AST
  const root: Root = {
    type: "root",
    children: [],
  };

  // Add document title
  const title: Heading = {
    type: "heading",
    depth: 1,
    children: [{ type: "text", value: PAGE_TITLE }],
  };
  root.children.push(title);

  // Add auto-generated notice
  const notice: Html = {
    type: "html",
    value: AUTO_GENERATED_COMMENT,
  };
  root.children.push(notice);

  const helper = program.createHelp();
  const visited = new Set<Command>();

  function walk(cmd: Command, parents: string[]): void {
    if (visited.has(cmd)) return;
    visited.add(cmd);

    const commandPath = [...parents, cmd.name()].join(" ").trim();

    // Heading for this command
    const heading: Heading = {
      type: "heading",
      depth: 2,
      children: [{ type: "inlineCode", value: commandPath || cmd.name() }],
    };
    root.children.push(heading);

    // Code block containing the help output
    const codeBlock: Code = {
      type: "code",
      lang: "bash",
      value: helper.formatHelp(cmd, helper).trimEnd(),
    };
    root.children.push(codeBlock);

    cmd.commands
      .filter((c: any) => !(c as any)._hidden)
      .forEach((sub: Command) => walk(sub, [...parents, cmd.name()]));
  }

  walk(program, []);

  // Stringify the AST to Markdown
  return unified().use(remarkStringify).stringify(root);
}

async function main(): Promise<void> {
  console.log("ðŸ”„ Generating CLI docs...");
  const program = await loadProgram();
  const markdown = buildMarkdown(program);
  await mkdir(DOCS_DIR, { recursive: true });
  await writeFile(OUTPUT_FILE_PATH, markdown, "utf8");
  console.log(`âœ… Saved to ${path.relative(REPO_ROOT, OUTPUT_FILE_PATH)}`);
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
