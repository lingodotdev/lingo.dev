name: Publish PHP SDK to Packagist

on:
  push:
    branches:
      - main
    paths:
      - 'php/sdk/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: mbstring, intl
          coverage: none
          tools: composer:v2

      - name: Ensure valid version exists in SDK
        run: |
          # Check if version is empty or invalid
          VERSION=$(php -r '
            $composerJson = json_decode(file_get_contents("php/sdk/composer.json"), true);
            echo isset($composerJson["version"]) ? $composerJson["version"] : "";
          ')
          
          if [[ -z "$VERSION" || ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Setting initial version to 0.1.0"
            php -r '
              $composerJson = json_decode(file_get_contents("php/sdk/composer.json"), true);
              $composerJson["version"] = "0.1.0";
              file_put_contents("php/sdk/composer.json", json_encode($composerJson, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
            '
          fi

      - name: Validate composer.json
        run: composer validate --no-check-publish

      - name: Install dependencies
        run: composer install --prefer-dist

      - name: Run tests
        run: vendor/bin/phpunit php/sdk/tests/

      # Code style checks removed as requested by user
      # - name: Check code style
      #   working-directory: ./php/sdk
      #   run: composer cs

  publish:
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: mbstring, intl
          coverage: none
          tools: composer:v2



      - name: Get current version
        id: current_version
        run: |
          # Check if version is empty or invalid
          VERSION=$(php -r '
            $composerJson = json_decode(file_get_contents("php/sdk/composer.json"), true);
            echo isset($composerJson["version"]) ? $composerJson["version"] : "";
          ')
          
          if [[ -z "$VERSION" || ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Setting initial version to 0.1.0"
            php -r '
              $composerJson = json_decode(file_get_contents("php/sdk/composer.json"), true);
              $composerJson["version"] = "0.1.0";
              file_put_contents("php/sdk/composer.json", json_encode($composerJson, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
            '
            VERSION="0.1.0"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Bump patch version
        id: bump_version
        run: |
          # Get current version
          CURRENT_VERSION=${{ steps.current_version.outputs.version }}
          
          # Validate current version format
          if [[ ! "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Warning: Invalid version format: $CURRENT_VERSION. Using 0.1.0 as base."
            CURRENT_VERSION="0.1.0"
          fi
          
          # Use PHP to increment patch version
          NEW_VERSION=$(php -r '
            $version = "${{ steps.current_version.outputs.version }}";
            if (!preg_match("/^[0-9]+\.[0-9]+\.[0-9]+$/", $version)) {
              $version = "0.1.0";
            }
            list($major, $minor, $patch) = explode(".", $version);
            $patch++;
            echo "$major.$minor.$patch";
          ')
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update version in SDK composer.json
          php -r '
          $composerJson = json_decode(file_get_contents("php/sdk/composer.json"), true);
          $composerJson["version"] = "${{ steps.bump_version.outputs.new_version }}";
          file_put_contents("php/sdk/composer.json", json_encode($composerJson, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
          '

      - name: Ensure SDK version is set before root install
        run: |
          # Check if version is empty or invalid in SDK composer.json
          VERSION=$(php -r '
            $composerJson = json_decode(file_get_contents("php/sdk/composer.json"), true);
            echo isset($composerJson["version"]) ? $composerJson["version"] : "";
          ')
          
          echo "Current PHP SDK version before install: $VERSION"
          
          if [[ -z "$VERSION" || ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Setting version to ${{ steps.bump_version.outputs.new_version }} before install"
            php -r '
              $composerJson = json_decode(file_get_contents("php/sdk/composer.json"), true);
              $composerJson["version"] = "${{ steps.bump_version.outputs.new_version }}";
              file_put_contents("php/sdk/composer.json", json_encode($composerJson, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
            '
          fi
          
          # Verify version is now set
          echo "PHP SDK version after fix:"
          php -r 'echo json_decode(file_get_contents("php/sdk/composer.json"), true)["version"];'
          
      - name: Install root composer dependencies
        run: |
          # Install composer dependencies from root composer.json
          # This will create a vendor directory with the PHP SDK symlinked
          composer install --no-dev --no-interaction --prefer-dist

      - name: Commit and push version bump
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: bump PHP SDK version to ${{ steps.bump_version.outputs.new_version }}"
          file_pattern: php/sdk/composer.json
          commit_user_name: "Lingo.dev"
          commit_user_email: "hi@lingo.dev"
          push_options: "--force"

      - name: Publish to Packagist
        run: |
          # Debug info
          echo "Publishing version ${{ steps.bump_version.outputs.new_version }} to Packagist"
          echo "Repository: lingodotdev/sdk"
          
          # Use our custom script for reliable Packagist publishing
          export PACKAGIST_USERNAME=lingodotdev
          export PACKAGIST_API_TOKEN=${{ secrets.PACKAGIST_API_TOKEN }}
          export PACKAGE_NAME=lingodotdev/sdk
          php scripts/packagist-publish.php
