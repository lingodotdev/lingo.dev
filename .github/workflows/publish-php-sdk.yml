name: Publish PHP SDK to Packagist

on:
  push:
    branches:
      - main
    paths:
      - 'php/sdk/**'
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: mbstring, intl
          coverage: none
          tools: composer:v2

      - name: Install dependencies
        run: |
          pnpm install
          cd php/sdk
          composer install --no-dev --no-interaction --prefer-dist

      - name: Check for PHP SDK changes
        id: check_changes
        if: github.event_name == 'push'
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q "^php/sdk/"; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Get current version
        id: current_version
        if: github.event_name == 'workflow_dispatch' || steps.check_changes.outputs.changes == 'true'
        run: |
          VERSION=$(node -p "require('./php/sdk/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        if: github.event_name == 'workflow_dispatch' || steps.check_changes.outputs.changes == 'true'
        run: |
          # Use semver library for version bumping
          npx semver -i patch ${{ steps.current_version.outputs.version }} > /tmp/new_version
          NEW_VERSION=$(cat /tmp/new_version)
          
          # Check for changeset type to determine bump type
          if grep -q "\"@lingo.dev/php-sdk\": major" .changeset/*.md 2>/dev/null; then
            NEW_VERSION=$(npx semver -i major ${{ steps.current_version.outputs.version }})
          elif grep -q "\"@lingo.dev/php-sdk\": minor" .changeset/*.md 2>/dev/null; then
            NEW_VERSION=$(npx semver -i minor ${{ steps.current_version.outputs.version }})
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update version in package.json
          node -e "const fs=require('fs');const pkg=require('./php/sdk/package.json');pkg.version='$NEW_VERSION';fs.writeFileSync('./php/sdk/package.json',JSON.stringify(pkg,null,2));"
          
          # Update version in composer.json
          node -e "const fs=require('fs');const pkg=JSON.parse(fs.readFileSync('./php/sdk/composer.json'));pkg.version='$NEW_VERSION';fs.writeFileSync('./php/sdk/composer.json',JSON.stringify(pkg,null,2));"

      - name: Commit version bump
        if: (github.event_name == 'workflow_dispatch' || steps.check_changes.outputs.changes == 'true') && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "devin-ai-integration[bot]@users.noreply.github.com"
          git config --local user.name "Devin AI"
          git add php/sdk/package.json php/sdk/composer.json
          git commit -m "chore: bump PHP SDK version to ${{ steps.bump_version.outputs.new_version }}"
          git push

      - name: Update Packagist
        if: github.event_name == 'workflow_dispatch' || steps.check_changes.outputs.changes == 'true'
        run: |
          curl -XPOST -H "content-type:application/json" \
          "https://packagist.org/api/update-package?username=lingodotdev&apiToken=${{ secrets.PACKAGIST_API_TOKEN }}" \
          -d '{"repository":{"url":"https://github.com/lingodotdev/lingo.dev"}}'
