import type { Metadata } from "next";
import { Inter } from "next/font/google";

// Replexica Compiler
import { ReplexicaIntlProvider } from '@replexica/react/client';
// Replexica
import { ReplexicaProvider } from '@replexica/react';

import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

const localeLoaders = {
  en: () => import('@replexica/translations/en.json'),
  es: () => import('@replexica/translations/es.json'),
};

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout(props: any) {
  const locale = props.params.locale;
  const localeData = await loadLocaleData(locale, localeLoaders);

  return (
    <ReplexicaProvider>
      <ReplexicaIntlProvider data={localeData}>
        <html lang={locale}>
          <body className={inter.className}>{props.children}</body>
        </html>
      </ReplexicaIntlProvider>
    </ReplexicaProvider>
  );
}

async function loadLocaleData(locale: string, localeLoaders: Record<string, () => Promise<any>>) {
  const loader = localeLoaders[locale];
  if (!loader) { throw new Error(`No loader for locale ${locale}`); }

  const localeModule = await loader();
  const localeData = localeModule.default;

  return localeData;
}